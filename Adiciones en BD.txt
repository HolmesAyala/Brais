

CREATE TABLE usuario.historial
(
    id integer NOT NULL serial,
    id_medico text COLLATE pg_catalog."default",
    id_usuario text COLLATE pg_catalog."default",
    motivo_consulta text COLLATE pg_catalog."default",
    observacion text COLLATE pg_catalog."default",
    servicio text COLLATE pg_catalog."default",
    fecha date,
    CONSTRAINT historial_pkey PRIMARY KEY (id)
)
WITH (
    OIDS = FALSE
)
TABLESPACE pg_default;

ALTER TABLE usuario.historial
    OWNER to postgres;




CREATE OR REPLACE FUNCTION usuario.f_agregar_historial(
	_id_medico text,
	_id_usuario text,
	_motivo_consulta text,
	_observacion text,
	_fecha date,
	_servicio text)
    RETURNS SETOF void
AS $BODY$

BEGIN 
	INSERT INTO usuario.historial(id_medico, id_usuario, motivo_consulta, observacion, fecha, servicio)
	VALUES (_id_medico, _id_usuario, _motivo_consulta, _observacion, _fecha, _servicio);
END

$BODY$
LANGUAGE 'plpgsql';




CREATE OR REPLACE FUNCTION usuario.f_obtener_historial(
	_id_usuario text)
    RETURNS TABLE(fecha date, nombre_medico text, servicio text, motivo_consulta text, observacion text) 
AS $BODY$

BEGIN
	return query
	select h.fecha,
	(me.nombre||' '||me.apellido) as nombre_medico, 
	h.servicio, 
	h.motivo_consulta, 
	h.observacion
	from usuario.historial as h
	join usuario.usuario as u on u.identificacion = h.id_usuario
	join usuario.usuario as me on me.identificacion = h.id_medico
	where h.id_usuario = _id_usuario
	order by h.fecha DESC;
END

$BODY$
LANGUAGE 'plpgsql';





CREATE OR REPLACE FUNCTION usuario.f_obtener_especialidad( _id integer )
    RETURNS SETOF usuario.especialidad
	
AS $BODY$

BEGIN 
	return query
		select * from usuario.especialidad where especialidad.id = _id;
END

$BODY$
LANGUAGE 'plpgsql';