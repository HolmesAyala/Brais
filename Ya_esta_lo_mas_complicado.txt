-- FUNCTION: pruebas.crear_citas()

-- DROP FUNCTION pruebas.crear_citas();

CREATE OR REPLACE FUNCTION pruebas.crear_citas(
	)
    RETURNS text
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$

DECLARE 
res medico.horario_medico%ROWTYPE;
res2 text:='';
h_inicio text;
h_fin text;
h_i time;
h_f time;
dia text;
aux json;
iterador integer:=0;
BEGIN
	FOR res IN SELECT * FROM medico.horario_medico 
	LOOP
		IF (res.horario->'Lunes')::text <> 'null' THEN
			dia:=((res.horario->'Lunes')::text)::json;
			iterador:=0;
			/*Si EL Dia No Es Nulo Se Empiezan A Recorrer Los Rangos Y Finalmente Generar Las Series*/
			WHILE ((dia::json)->(iterador::integer))::text <> '[null]' LOOP
			    aux:=((dia::json)->>(iterador::integer))::json;
				h_inicio=aux->'Hora_inicio';
				h_fin=aux->'Hora_fin';
				h_i:=h_inicio::time;
				h_f:=h_fin::time;
				res2=res2||h_i||'Hora Inicio';
				res2=res2||h_f||'Hora Fin';
				iterador:=iterador+1;
				/*Llamar Funcion para crear las series con los datos obtenidos*/
			END LOOP;
		ELSE
			/*res2=res2||'No Existe El Lunes; ';*/
		END IF;
		IF (res.horario->'Martes')::text <> 'null' THEN 
			dia:=((res.horario->'Martes')::text)::json;
				iterador:=0;
				/*Si EL Dia No Es Nulo Se Empiezan A Recorrer Los Rangos Y Finalmente Generar Las Series*/
				WHILE ((dia::json)->(iterador::integer))::text <> '[null]' LOOP
					aux:=((dia::json)->>(iterador::integer))::json;
					h_inicio=aux->'Hora_inicio';
					h_fin=aux->'Hora_fin';
					res2=res2||h_inicio||'Hora Inicio';
					res2=res2||h_fin||'Hora Fin';
					iterador:=iterador+1;
				END LOOP;
		ELSE
			/*res2=res2||'No Existe El Martes; ';*/	
		END IF;
		IF (res.horario->'Miercoles')::text <> 'null' THEN
			dia:=((res.horario->'Miercoles')::text)::json;
				iterador:=0;
				/*Si EL Dia No Es Nulo Se Empiezan A Recorrer Los Rangos Y Finalmente Generar Las Series*/
				WHILE ((dia::json)->(iterador::integer))::text <> '[null]' LOOP
					aux:=((dia::json)->>(iterador::integer))::json;
					h_inicio=aux->'Hora_inicio';
					h_fin=aux->'Hora_fin';
					res2=res2||h_inicio||'Hora Inicio';
					res2=res2||h_fin||'Hora Fin';
					iterador:=iterador+1;
				END LOOP;
		ELSE
			/*res2=res2||'No Existe El Miercoles; ';*/
		END IF;
		IF (res.horario->'Jueves')::text <> 'null' THEN
			dia:=((res.horario->'Jueves')::text)::json;
					iterador:=0;
					/*Si EL Dia No Es Nulo Se Empiezan A Recorrer Los Rangos Y Finalmente Generar Las Series*/
					WHILE ((dia::json)->(iterador::integer))::text <> '[null]' LOOP
						aux:=((dia::json)->>(iterador::integer))::json;
						h_inicio=aux->'Hora_inicio';
						h_fin=aux->'Hora_fin';
						res2=res2||h_inicio||'Hora Inicio';
						res2=res2||h_fin||'Hora Fin';
						iterador:=iterador+1;
					END LOOP;
		ELSE
			/*res2=res2||'No Existe El Jueves; ';*/
		END IF;
		IF (res.horario->'Viernes')::text <> 'null' THEN
			dia:=((res.horario->'Viernes')::text)::json;
					iterador:=0;
					/*Si EL Dia No Es Nulo Se Empiezan A Recorrer Los Rangos Y Finalmente Generar Las Series*/
					WHILE ((dia::json)->(iterador::integer))::text <> '[null]' LOOP
						aux:=((dia::json)->>(iterador::integer))::json;
						h_inicio=aux->'Hora_inicio';
						h_fin=aux->'Hora_fin';
						res2=res2||h_inicio||'Hora Inicio';
						res2=res2||h_fin||'Hora Fin';
						iterador:=iterador+1;
					END LOOP;
		ELSE
			/*res2=res2||'No Existe El Viernes; ';*/
		END IF;
		IF (res.horario->'sabado')::text <> 'null' THEN 
			dia:=((res.horario->'sabado')::text)::json;
					iterador:=0;
					/*Si EL Dia No Es Nulo Se Empiezan A Recorrer Los Rangos Y Finalmente Generar Las Series*/
					WHILE ((dia::json)->(iterador::integer))::text <> '[null]' LOOP
						aux:=((dia::json)->>(iterador::integer))::json;
						h_inicio=aux->'Hora_inicio';
						h_fin=aux->'Hora_fin';
						res2=res2||h_inicio||'Hora Inicio';
						res2=res2||h_fin||'Hora Fin';
						iterador:=iterador+1;
					END LOOP;
		ELSE
			/*res2=res2||'No Existe El Sabado; ';*/
		END IF;
	END LOOP;
	RETURN res2;
END;

$BODY$;

ALTER FUNCTION pruebas.crear_citas()
    OWNER TO postgres;

